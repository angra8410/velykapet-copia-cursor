#!/usr/bin/env python3
"""
Script de Validaci√≥n: Campo Images en API de Productos
Verifica que el campo Images est√© correctamente poblado en la respuesta de la API
"""

import requests
import json
import sys

def validate_images_field():
    """Valida que el campo Images est√© presente y poblado en la API"""
    
    API_URL = "http://localhost:5135/api/Productos"
    
    print("=" * 70)
    print("üîç Validaci√≥n de Campo Images - API de Productos VelyKapet")
    print("=" * 70)
    print()
    
    try:
        # Test 1: Obtener todos los productos
        print("üì° Test 1: Obteniendo todos los productos...")
        response = requests.get(API_URL, timeout=10)
        
        if response.status_code != 200:
            print(f"‚ùå ERROR: API retorn√≥ c√≥digo {response.status_code}")
            return False
        
        productos = response.json()
        print(f"‚úÖ API respondi√≥ correctamente: {len(productos)} productos")
        print()
        
        # Test 2: Verificar campo Images en cada producto
        print("üì¶ Test 2: Verificando campo Images en cada producto...")
        productos_sin_images = []
        productos_con_images = []
        productos_con_r2 = []
        
        for producto in productos:
            nombre = producto.get('NombreBase', 'Sin nombre')
            images = producto.get('Images', None)
            urlimagen = producto.get('URLImagen', None)
            
            # Verificar que el campo Images existe
            if images is None:
                productos_sin_images.append(nombre)
                print(f"   ‚ùå {nombre}: Campo Images NO existe")
            elif len(images) == 0:
                productos_sin_images.append(nombre)
                print(f"   ‚ö†Ô∏è  {nombre}: Campo Images vac√≠o")
            else:
                productos_con_images.append(nombre)
                primera_imagen = images[0]
                
                # Verificar si es una URL de Cloudflare R2
                if 'velykapet.com' in primera_imagen:
                    productos_con_r2.append(nombre)
                    print(f"   ‚úÖ {nombre}: {len(images)} imagen(es) - Cloudflare R2 ‚úì")
                else:
                    print(f"   ‚úÖ {nombre}: {len(images)} imagen(es)")
        
        print()
        print("=" * 70)
        print("üìä RESUMEN DE VALIDACI√ìN")
        print("=" * 70)
        print(f"Total de productos:              {len(productos)}")
        print(f"‚úÖ Con campo Images poblado:     {len(productos_con_images)}")
        print(f"‚ùå Sin campo Images o vac√≠o:     {len(productos_sin_images)}")
        print(f"‚òÅÔ∏è  Con im√°genes Cloudflare R2:  {len(productos_con_r2)}")
        print("=" * 70)
        print()
        
        # Test 3: Verificar producto espec√≠fico con imagen R2
        print("üîç Test 3: Verificando producto espec√≠fico (ID 2 - Churu At√∫n)...")
        response = requests.get(f"{API_URL}/2", timeout=10)
        
        if response.status_code == 200:
            producto = response.json()
            nombre = producto.get('NombreBase')
            urlimagen = producto.get('URLImagen')
            images = producto.get('Images', [])
            
            print(f"   Producto: {nombre}")
            print(f"   URLImagen: {urlimagen}")
            print(f"   Images: {images}")
            
            if images and len(images) > 0 and 'velykapet.com' in images[0]:
                print("   ‚úÖ Campo Images correctamente configurado con URL de Cloudflare R2")
            else:
                print("   ‚ùå Campo Images no tiene URL de Cloudflare R2")
        else:
            print(f"   ‚ùå No se pudo obtener producto ID 2: {response.status_code}")
        
        print()
        print("=" * 70)
        
        # Resultado final
        if len(productos_sin_images) == 0:
            print("üéâ ¬°VALIDACI√ìN EXITOSA! Todos los productos tienen campo Images")
            return True
        else:
            print(f"‚ö†Ô∏è  ADVERTENCIA: {len(productos_sin_images)} producto(s) sin Images")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå ERROR: No se puede conectar a la API")
        print("   Aseg√∫rate de que el backend est√° corriendo en http://localhost:5135")
        return False
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        return False

if __name__ == "__main__":
    success = validate_images_field()
    sys.exit(0 if success else 1)
