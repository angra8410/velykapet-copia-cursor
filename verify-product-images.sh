#!/bin/bash

# ============================================================================
# Script de Verificaci√≥n y Diagn√≥stico: Im√°genes de Productos
# ============================================================================
# Proyecto: VelyKapet E-commerce
# Objetivo: Diagnosticar por qu√© las im√°genes no se muestran en el cat√°logo
# ============================================================================

set -e

BACKEND_URL="http://localhost:5135"
BACKEND_DIR="backend-config"
FRONTEND_PORT="3333"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo ""
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë  üîç DIAGN√ìSTICO: Im√°genes de Productos VelyKapet                      ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

# ============================================================================
# PASO 1: Verificar que el backend est√° corriendo
# ============================================================================
echo -e "${BLUE}üìã PASO 1: Verificando que el backend est√° corriendo...${NC}"
echo ""

if curl -s --fail "${BACKEND_URL}/api/Productos" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Backend est√° corriendo en ${BACKEND_URL}${NC}"
else
    echo -e "${RED}‚ùå Backend NO est√° corriendo en ${BACKEND_URL}${NC}"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  Necesitas iniciar el backend primero:${NC}"
    echo "   cd ${BACKEND_DIR}"
    echo "   dotnet run --urls=\"${BACKEND_URL}\""
    echo ""
    exit 1
fi

echo ""

# ============================================================================
# PASO 2: Verificar respuesta de la API
# ============================================================================
echo -e "${BLUE}üìã PASO 2: Verificando respuesta de la API...${NC}"
echo ""

# Obtener productos de la API
RESPONSE=$(curl -s "${BACKEND_URL}/api/Productos")

# Contar productos
PRODUCT_COUNT=$(echo "$RESPONSE" | jq '. | length')
echo -e "   üì¶ Total de productos en la API: ${GREEN}${PRODUCT_COUNT}${NC}"

if [ "$PRODUCT_COUNT" -eq 0 ]; then
    echo -e "${RED}‚ùå No hay productos en la base de datos${NC}"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  Necesitas insertar productos en la base de datos${NC}"
    exit 1
fi

echo ""

# ============================================================================
# PASO 3: Verificar campo URLImagen en la respuesta
# ============================================================================
echo -e "${BLUE}üìã PASO 3: Verificando campo URLImagen...${NC}"
echo ""

# Contar productos con URLImagen
PRODUCTS_WITH_IMAGE=$(echo "$RESPONSE" | jq '[.[] | select(.URLImagen != null and .URLImagen != "")] | length')
PRODUCTS_WITHOUT_IMAGE=$((PRODUCT_COUNT - PRODUCTS_WITH_IMAGE))

echo -e "   ‚úÖ Productos con URLImagen: ${GREEN}${PRODUCTS_WITH_IMAGE}${NC}"
echo -e "   ‚ùå Productos sin URLImagen: ${RED}${PRODUCTS_WITHOUT_IMAGE}${NC}"
echo ""

if [ "$PRODUCTS_WITHOUT_IMAGE" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  PROBLEMA ENCONTRADO: Productos sin URLImagen${NC}"
    echo ""
    echo "   Productos sin imagen:"
    echo "$RESPONSE" | jq -r '.[] | select(.URLImagen == null or .URLImagen == "") | "   - [\(.IdProducto)] \(.NombreBase)"'
    echo ""
    echo -e "${YELLOW}üìå SOLUCI√ìN:${NC}"
    echo "   Ejecutar el script SQL para poblar las im√°genes:"
    echo "   ${BACKEND_DIR}/Scripts/FIX_POPULATE_PRODUCT_IMAGES.sql"
    echo ""
    echo "   Opci√≥n 1 (sqlcmd):"
    echo "   sqlcmd -S localhost -d VentasPet_Nueva -E -i ${BACKEND_DIR}/Scripts/FIX_POPULATE_PRODUCT_IMAGES.sql"
    echo ""
    echo "   Opci√≥n 2 (SSMS o Azure Data Studio):"
    echo "   Abrir el archivo SQL y ejecutarlo manualmente"
    echo ""
fi

# ============================================================================
# PASO 4: Verificar campo Images en la respuesta
# ============================================================================
echo -e "${BLUE}üìã PASO 4: Verificando campo Images (calculado)...${NC}"
echo ""

# Verificar si el primer producto tiene el campo Images
FIRST_PRODUCT_HAS_IMAGES=$(echo "$RESPONSE" | jq '.[0] | has("Images")')

if [ "$FIRST_PRODUCT_HAS_IMAGES" == "true" ]; then
    echo -e "${GREEN}‚úÖ Campo Images est√° presente en la respuesta de la API${NC}"
    
    # Mostrar el campo Images del primer producto
    FIRST_PRODUCT_IMAGES=$(echo "$RESPONSE" | jq -r '.[0].Images[]' 2>/dev/null || echo "")
    
    if [ -n "$FIRST_PRODUCT_IMAGES" ]; then
        echo -e "${GREEN}‚úÖ Campo Images tiene valores:${NC}"
        echo "$RESPONSE" | jq '.[0].Images'
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Campo Images est√° vac√≠o (array vac√≠o)${NC}"
        echo ""
        echo "   Esto es normal si URLImagen est√° vac√≠o en la base de datos."
        echo "   El campo Images se calcula a partir de URLImagen."
    fi
else
    echo -e "${RED}‚ùå Campo Images NO est√° presente en la respuesta de la API${NC}"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  El modelo ProductoDto no tiene la propiedad Images implementada${NC}"
    echo "   Verifica el archivo: ${BACKEND_DIR}/Models/Producto.cs"
fi

echo ""

# ============================================================================
# PASO 5: Verificar accesibilidad de las im√°genes en R2
# ============================================================================
if [ "$PRODUCTS_WITH_IMAGE" -gt 0 ]; then
    echo -e "${BLUE}üìã PASO 5: Verificando accesibilidad de im√°genes en Cloudflare R2...${NC}"
    echo ""
    
    # Obtener URLs de im√°genes √∫nicas
    IMAGE_URLS=$(echo "$RESPONSE" | jq -r '[.[] | select(.URLImagen != null and .URLImagen != "") | .URLImagen] | unique | .[]')
    
    ACCESSIBLE_COUNT=0
    NOT_FOUND_COUNT=0
    ERROR_COUNT=0
    
    while IFS= read -r url; do
        if [ -n "$url" ]; then
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")
            
            if [ "$HTTP_STATUS" == "200" ]; then
                echo -e "   ${GREEN}‚úÖ 200${NC} $url"
                ((ACCESSIBLE_COUNT++))
            elif [ "$HTTP_STATUS" == "404" ]; then
                echo -e "   ${RED}‚ùå 404${NC} $url"
                ((NOT_FOUND_COUNT++))
            else
                echo -e "   ${YELLOW}‚ö†Ô∏è  ${HTTP_STATUS}${NC} $url"
                ((ERROR_COUNT++))
            fi
        fi
    done <<< "$IMAGE_URLS"
    
    echo ""
    echo -e "   Resumen:"
    echo -e "   - Im√°genes accesibles (200 OK): ${GREEN}${ACCESSIBLE_COUNT}${NC}"
    echo -e "   - Im√°genes no encontradas (404): ${RED}${NOT_FOUND_COUNT}${NC}"
    echo -e "   - Otros errores: ${YELLOW}${ERROR_COUNT}${NC}"
    echo ""
    
    if [ "$NOT_FOUND_COUNT" -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  PROBLEMA: Algunas im√°genes no existen en Cloudflare R2${NC}"
        echo ""
        echo -e "${YELLOW}üìå SOLUCI√ìN:${NC}"
        echo "   Opci√≥n 1: Subir las im√°genes a Cloudflare R2 con los nombres esperados"
        echo "   Opci√≥n 2: Cambiar las URLs en la base de datos a im√°genes que s√≠ existen"
        echo ""
    fi
fi

# ============================================================================
# PASO 6: Mostrar primer producto completo para referencia
# ============================================================================
echo -e "${BLUE}üìã PASO 6: Mostrando primer producto (referencia)...${NC}"
echo ""
echo "$RESPONSE" | jq '.[0]'
echo ""

# ============================================================================
# RESUMEN FINAL
# ============================================================================
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë  üìä RESUMEN DEL DIAGN√ìSTICO                                           ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

if [ "$PRODUCTS_WITHOUT_IMAGE" -eq 0 ] && [ "$NOT_FOUND_COUNT" -eq 0 ]; then
    echo -e "${GREEN}‚úÖ TODO EST√Å CORRECTO${NC}"
    echo ""
    echo "   - Backend est√° corriendo ‚úÖ"
    echo "   - Todos los productos tienen URLImagen ‚úÖ"
    echo "   - Campo Images est√° presente ‚úÖ"
    echo "   - Todas las im√°genes son accesibles ‚úÖ"
    echo ""
    echo -e "${GREEN}üéâ Las im√°genes deber√≠an mostrarse correctamente en el cat√°logo${NC}"
    echo ""
    echo "   Si a√∫n no ves las im√°genes, verifica:"
    echo "   1. Frontend est√° corriendo: npm start"
    echo "   2. Navegador: http://localhost:${FRONTEND_PORT}"
    echo "   3. DevTools Console (F12) para ver logs"
    echo ""
elif [ "$PRODUCTS_WITHOUT_IMAGE" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  ACCI√ìN REQUERIDA: Poblar campo URLImagen${NC}"
    echo ""
    echo "   üìù Pasos a seguir:"
    echo "   1. Ejecutar el script SQL:"
    echo "      ${BACKEND_DIR}/Scripts/FIX_POPULATE_PRODUCT_IMAGES.sql"
    echo ""
    echo "   2. Reiniciar el backend (Ctrl+C y volver a ejecutar dotnet run)"
    echo ""
    echo "   3. Ejecutar este script nuevamente para verificar:"
    echo "      bash verify-product-images.sh"
    echo ""
elif [ "$NOT_FOUND_COUNT" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  ACCI√ìN REQUERIDA: Subir im√°genes a Cloudflare R2${NC}"
    echo ""
    echo "   üìù Pasos a seguir:"
    echo "   1. Subir las im√°genes faltantes a tu bucket de Cloudflare R2"
    echo "   2. Asegurarte de que los nombres coincidan exactamente"
    echo "   3. Verificar que las im√°genes sean p√∫blicamente accesibles"
    echo ""
else
    echo -e "${YELLOW}‚ö†Ô∏è  HAY PROBLEMAS QUE REQUIEREN ATENCI√ìN${NC}"
    echo ""
    echo "   Revisa los pasos anteriores para m√°s detalles."
    echo ""
fi

echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë  ‚úÖ DIAGN√ìSTICO COMPLETADO                                            ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""
